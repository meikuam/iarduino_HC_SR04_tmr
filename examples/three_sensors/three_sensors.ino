// Бибилиотека разработана для ультразвукового датчика расстояния:
// HC-SR04 http://iarduino.ru/shop/Sensory-Datchiki/ultrazvukovogo-datchika-hc-sr04-rasstoyaniya-dvizheniya.html
// Вывод TRIG датчика HC_SR04 подключается к любому выводу Arduino (указывется первым при объявлении объекта).
// Вывод ECHO датчика HC_SR04 подключается к любому выводу Arduino (указывется вторым при объявлении объекта).

#include <iarduino_HC_SR04_tmr.h>        // Подключаем библиотеку для работы с датчиком.
iarduino_HC_SR04_tmr hc1(12,11);         // Объявляем объект для работы с 1 датчиком, указав номера выводов arduino подключённых к выводам TRIG и ECHO датчика.
iarduino_HC_SR04_tmr hc2(10,9);          // Объявляем объект для работы с 2 датчиком, указав номера выводов arduino подключённых к выводам TRIG и ECHO датчика.
iarduino_HC_SR04_tmr hc3(8,7);           // Объявляем объект для работы с 3 датчиком, указав номера выводов arduino подключённых к выводам TRIG и ECHO датчика.
                                         // (1 датчик: TRIG=12, ECHO=11) (2 датчик: TRIG=10, ECHO=9) (3 датчик: TRIG=8, ECHO=7).
void setup(){                            //
     hc1.begin(100);                     // Инициируем работу с 1 датчиком указав период его опроса 100 мс.
     hc2.begin(100);                     // Инициируем работу с 2 датчиком указав период его опроса 100 мс.
     hc3.begin(100);                     // Инициируем работу с 3 датчиком указав период его опроса 100 мс.
     Serial.begin(9600);                 // Инициируем работу с шиной UART на скорости 9600 бит/сек, для передачи данных в монитор последовательного порта.
}                                        //
                                         //
void loop(){                             //
//   Включаем и отключаем датчики:       //
     int i = millis()%150;               // Определяем переменную i которая будет принимать значения от 0 до 149 увеличивающиеся с каждой миллисекундой.
     hc1.work( (i>=  0) && (i< 50) );    // 1 датчик будет работать 50 мс (при i =   0... 49) и отключаться на 100 мc (при i = 50...149).
     hc2.work( (i>= 50) && (i<100) );    // 2 датчик будет работать 50 мс (при i =  50... 99) и отключаться на 100 мc (при i = 0...49, 100...149).
     hc3.work( (i>=100) && (i<150) );    // 3 датчик будет работать 50 мс (при i = 100...149) и отключаться на 100 мc (при i = 0... 99).
                                         //
//   Выводим показания всех датчиков:    //
     if( millis()%1000==0 ){             // Условие оператора if будет выполняться 1 раз за 1000 мс (1 раз в секунду).
         Serial.println(hc1.distance()); // Выводим расстояние до препятствия 1 датчика (расстояние не сбрасывается если датчик отключён).
         Serial.println(hc2.distance()); // Выводим расстояние до препятствия 2 датчика (расстояние не сбрасывается если датчик отключён).
         Serial.println(hc3.distance()); // Выводим расстояние до препятствия 3 датчика (расстояние не сбрасывается если датчик отключён).
         Serial.println("============"); // 
         delay(2);                       // Ждём 2 мс, чтоб не вывести данные несколько раз за 1 секунду.
     }                                   //
}                                        //

// Метод объект.distance() может принимать в качестве параметра температуру воздуха в °C (от -128 до +127) для увеличения точности измерений (по умолчанию +23°C).
// Метод объект.begin()    в данном примере принимает период опроса 100 мс, значит датчик не будет опрошен более 1 раза за время его включения методом объект.work().
// Метод объект.work()     в данном примере поочерёдно включает датчики на 50 мс и отключает на 100 мс, так что одновременно работает только один датчик.
//                         Таким образом звуковая волна отправленная одним датчиком не будет принята другим датчиком и не исказит его показания.